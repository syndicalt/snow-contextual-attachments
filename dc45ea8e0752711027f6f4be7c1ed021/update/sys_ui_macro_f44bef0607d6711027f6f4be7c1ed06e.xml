<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_macro">
    <sys_ui_macro action="INSERT_OR_UPDATE">
        <active>true</active>
        <category>general</category>
        <description/>
        <media_type/>
        <name>contextual_attachments</name>
        <scoped_name>x_975207_context_0_contextual_attachments</scoped_name>
        <sys_class_name>sys_ui_macro</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-11-06 02:53:56</sys_created_on>
        <sys_id>f44bef0607d6711027f6f4be7c1ed06e</sys_id>
        <sys_mod_count>1293</sys_mod_count>
        <sys_name>contextual_attachments</sys_name>
        <sys_package display_value="Contextual Attachments" source="x_975207_context_0">dc45ea8e0752711027f6f4be7c1ed021</sys_package>
        <sys_policy/>
        <sys_scope display_value="Contextual Attachments">dc45ea8e0752711027f6f4be7c1ed021</sys_scope>
        <sys_update_name>sys_ui_macro_f44bef0607d6711027f6f4be7c1ed06e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-17 01:34:50</sys_updated_on>
        <xml><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
    <style>
        #container {
			display: flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
            width: 98%;
            margin: 0 auto;
        }
		#attachment-uploader {
			height: 20%;
			width: 100%;
		}
		#attachment-uploader:hover{
			cursor: pointer;
		}
		#file-list {
			width: 100%;
		}
		.attachment-link {
			font-weight: bold;
		}
		.drop-zone {
			display:flex;
			flex-direction: column;
			align-items: center;
			justify-content: center;
		}
		.error {
			font-size: 0.875em;
			color: red;
		}
		div.bordered {
			padding: 0px 10px 10px 10px;
			border: 1px dotted gray;
		}
		div.top-pad {
			padding-top: 1.5rem;
		}
		h4.underlined {
			text-decoration: underline;
		}
		h5 {
			color: gray;
			font-weight: bold;
		}
		.h5 {
			color: gray;
			font-size: 15px;
			font-weight: bold;
			padding-left: 0.1rem;
		}
		input#file-input {
			display: none;
		}
		span.created-by {
			font-weight: normal;
			font-size: 12px;
		}
		ul.tree, ul.tree ul {
			list-style: none;
			margin: 0;
			padding: 0.1rem;
			
		} 
		ul.tree ul {
			margin-left: 6px;
		}
		ul.tree li {
			margin: 0;
			width: 100%;
			padding: 0 7px;
			line-height: 20px;
			color: #321;
			font-weight: bold;
			border-left:1px solid rgb(100,100,100);

		}
		ul.tree li:last-child {
			border-left:none;
		}
		ul.tree li:before {
			position:relative;
			top:-0.3em;
			height:1.5em;
			width:12px;
			color:white;
			border-bottom:1px solid rgb(100,100,100);
			content:"";
			display:inline-block;
			left:-7px;
		}
		ul.tree li:last-child:before {
			border-left:1px solid rgb(100,100,100);   
		}
		.icon-delete:hover {
			color: red;
		}
		.icon-download:hover {
			color: purple;
		}
    </style>
	
	<g2:evaluate var="jvar_table_name">
        var table_name = current.getTableName();
		var record_sys_id = current.getUniqueValue();
		var GLOBAL_CONTEXT = false;
	</g2:evaluate>

	<g2:evaluate var="jvar_current_context_value" object="true" jelly="true">
		var current_context = {
			"context": "",
			"custom": false,
			"results": []
		}
		var ga = new x_975207_context_0.ContextualAttachmentsClientUtils().matchContext(table_name, record_sys_id);
		var readbleContext = ga.context;

		if(ga.context_type == "custom_defined") {
			var customContexts = new GlideRecord("x_975207_context_0_custom_contexts");
			customContexts.addQuery("related_context", ga.context_sys_id);
			customContexts.query();
			current_context.custom = true;
			while(customContexts.next()) {
				current_context.results.push({
					"context": null,
					"name": customContexts.name.toString(),
					"value": customContexts.value.toString()
				});
			}
		} else {
			var contextVals = new GlideRecord("sys_choice");
			contextVals.addQuery("name", table_name)
			contextVals.addQuery("element", ga.context);
			contextVals.query();
			if(!contextVals.hasNext()) {
				var superClass = new GlideRecord("sys_db_object");
				superClass.addQuery("name", table_name);
				superClass.query();

				if(superClass.next()) {
					contextVals.initialize();
					contextVals.addQuery("name", superClass.super_class.name);
					contextVals.addQuery("element", ga.context);
					contextVals.query();

					while(contextVals.next()) {
						current_context.results.push({
							"context": "",
							"name": contextVals.label.toString(),
							"value": contextVals.value.toString()
						});
					}
				}
			} else {
				while(contextVals.next()) {
					current_context.results.push({
						"context": "",
						"name": contextVals.label.toString(),
						"value": contextVals.value.toString()
					});
				}
			}
		}
		
		if(current_context.results.length > 0) GLOBAL_CONTEXT = true;
		current_context;
	</g2:evaluate>
	
    <g2:evaluate var="jvar_res" object="true" jelly="true">
		var res = [];	
        var gr = new GlideRecord("x_975207_context_0_sys_attachment_rel_context");
        gr.addQuery("related_record", record_sys_id);
        gr.query();
 
        while(gr.next()) {
			var obj = {}

			obj.context_value = gr.getValue("context_value").toString();
			obj.related_attachment = gr.getDisplayValue("related_attachment").toString();
			obj.related_attachment_sys_id = gr.getValue("related_attachment").toString();
			obj.attachment_link = gr.getValue("related_attachment").toString();
			obj.related_context = gr.getDisplayValue("related_context").toString();
			obj.related_record = gr.getValue("related_record");
			obj.created_by = gr.getDisplayValue("created_by");
			obj.created_date = new GlideDateTime(gr.getValue("sys_created_on")).getDate();
		
			res.push(obj);
        }

        res;
    </g2:evaluate>
	
    <div id="container">
		<j2:if test="$[GLOBAL_CONTEXT]">
			<div id="attachment-uploader" class="bordered">
				<j2:if test="$[jvar_current_context_value.custom == true]">
					<h5>Custom Context</h5>
					<select id="custom_context" class="form-control">
						<option disabled="true" selected="true" value="">-- Select Context --</option>
						<j2:forEach var="jvar_select_item" items="$[jvar_current_context_value.results]">
							<option value="$[jvar_select_item.value]">$[jvar_select_item.name]</option>
						</j2:forEach>
					</select>
					<span id="err" class="error"></span>
				</j2:if>
				<div class="drop-zone" id="drop-zone">
					<h5 class="drop-zone-item">Click Here to Add an Attachment in Context</h5>
					<h5 class="drop-zone-item">Note: Attachments added via the standard attachment methods (drag &amp; drop, or top of the form) will not be tagged with a context.</h5>
				</div>
				<input type="file" id="file-input" multiple="true" value="${jvar_current_state}" />
			</div>
			<div id="file-list">
				<input type="hidden" id="context_reader" value="$[readbleContext || '']" />
				<h4 class="underlined">Attached Files by Available Context</h4>
				<div class="bordered top-pad">
					<j2:forEach var="jvar_context" items="$[jvar_current_context_value.results]">
						<ul class="tree">
							<span class="icon-folder">
								<span class="h5">$[jvar_context.name]</span>
							</span>
							<ul id="$[jvar_context.value]" name="$[jvar_context.name]" class="tree">
							<j2:forEach var="jvar_f" items="$[jvar_res]">
								<j2:if test="$[jvar_f.context_value == jvar_context.name]">
									<li id="$[jvar_f.related_attachment_sys_id]">
										<span class="attachment-link">
											$[jvar_f.related_attachment] $[SP] <span class="created-by">(Attached By: $[jvar_f.created_by] on $[jvar_f.created_date])</span> $[SP]
											<a title="Download Attachment" href="/sys_attachment.do?sys_id=$[jvar_f.attachment_link]" rel="nofollow">
												<span class="btn btn-small icon-download" />
											</a>
											<span title="Remove Attachment" onClick="deleteAttachment('$[jvar_f.related_attachment_sys_id]')" >
												<span class="btn btn-small icon-delete" />
											</span>
										</span>
									</li>
								</j2:if>
							</j2:forEach>
							</ul>
						</ul>
					</j2:forEach>
				</div>
			</div>
		</j2:if>
		<j2:if test="$[!GLOBAL_CONTEXT]">
			<div>
				<p>
					No attachment context has been configured for table $[table_name] or the current record does not meet any context criteria. Please contact your Context Administrator with any questions or issues.
				</p>
			</div>
		</j2:if>
    </div>

	<script>
		function deleteAttachment(id) {
			var ga = new GlideAjax("x_975207_context_0.ContextualAttachmentsClientUtils");
			ga.addParam("sysparm_name", "deleteAttachment");
			ga.addParam("sysparm_attSysId", id);
			ga.addParam("sysparm_table", g_form.getTableName());
			ga.getXML(processCallback);
			
			function processCallback(response) {
				var answer = response.responseXML.documentElement.getAttribute("answer");

				if(answer) {
					document.getElementById(id).remove();
				} else {
					g_form.addErrorMessage(answer);
				}	 
			}
		}
		
		function handleDrop(event) {
			event.preventDefault();
			const fileList = event.target.files;

			for(file in fileList) {
				alert(fileList[file]);
			}
		}

		function handleFileInput(event) {
			const fileList = event.target.files;
			const readableContext = document.getElementById("context_reader").getAttribute("value");
			const customContext = g_form.getValue("custom_context");
			if(readableContext) {
				const choiceValue = g_form.getValue(readableContext);
				let chk = new GlideAjax("x_975207_context_0.ContextualAttachmentsClientUtils");
				chk.addParam("sysparm_name", "getChoiceFromList");
				chk.addParam("sysparm_table", g_form.getTableName());
				chk.addParam("sysparm_record", g_form.getUniqueValue());
				chk.addParam("sysparm_list", readableContext);
				chk.getXML(cb);

				function cb(response) {
					var answer = response.responseXML.documentElement.getAttribute("answer");
					for(file in fileList) {
						if(fileList[file].size) {

							attachFile(fileList[file], JSON.parse(answer).value, JSON.parse(answer).display);
						}
					}
				}
			} else {
				if(customContext == "") {
					var element = document.getElementById("err")
					element.innerHTML = "Please select a context!";

					setInterval(function() {
						element.innerHTML = "";
					},5000);
				} else {
					for(file in fileList) {
						if(fileList[file].size) {
							attachFile(fileList[file], null, customContext);
						}
					}
				}
			}
		}

		function attachFile(file, value, display) {
			let ga = new GlideAjax("x_975207_context_0.ContextualAttachmentsClientUtils");
			ga.addParam("sysparm_name", "postAttachment");
			ga.addParam("sysparm_table", g_form.getTableName());
			ga.addParam("sysparm_record", g_form.getUniqueValue());
			ga.addParam("sysparm_fileName", file.name);
			ga.addParam("sysparm_file", file);
			ga.addParam("sysparm_user", g_user.getUserID());
			ga.addParam("sysparm_choice", display);
			
			let res = ga.getXML(function(response) {
				let answer = response.responseXML.documentElement.getAttribute("answer");
				if(answer.sys_id == "") {
					g_form.addInfoMessage(answer);
				} else {
					if(value) {
						appendHTMLElement(JSON.parse(answer), value);
					} else {
						appendHTMLElement(JSON.parse(answer), display);
					}
				}
			});
		}

		function appendHTMLElement(el, choice) {
			try {
				let fileListContainer = document.getElementById(choice); //choice.split(' ').join('_'));
				let listItem = document.createElement("li");
				listItem.id = el.sys_id;
				listItem.innerHTML = el.element;
				fileListContainer.appendChild(listItem);
			} catch(e) {
				g_form.addErrorMessage(e.message);
				if(e.message = "Error MessageCannot read properties of null (reading 'appendChild')") {
					g_form.addErrorMessage("This error is caused by the associated Attachment Context field not appearing on the Incident form. Please contact your administrator.")
				}
			}
			
		}

		(function(exports, d) {
			function domReady(fn, context) {
				function onReady(event) {
					d.removeEventListener("DOMContentLoaded", onReady);
					fn.call(context || exports, event);
				}

				d.addEventListener
				d.addEventListener("DOMContentLoaded", onReady)
			}

			exports.domReady = domReady;
		})(window, document);
		
		domReady(function(event) {
			const dropZone = document.getElementById("drop-zone");
			//dropZone.addEventListener("dragover", (event) => event.preventDefault());
			//dropZone.addEventListener("drop", handleDrop);
			const fileInput = document.getElementById("file-input");
			fileInput.addEventListener("change", handleFileInput);
			dropZone.addEventListener("click", () => fileInput.click());
		});
	</script>
</j:jelly>]]></xml>
    </sys_ui_macro>
</record_update>
